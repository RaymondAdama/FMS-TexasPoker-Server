//Game Class in FMS Server;
Game.prototype.index; // 唯一标识
Game.prototype.intervalid
Game.prototype.publicpoker;//array;
Game.prototype.sitpoker1; //array;
Game.prototype.sitpoker2; //array;
Game.prototype.roundstatus; //must small than 4,can be 4
Game.prototype.generatepoker;
Game.prototype.gamestart;
Game.prototype.bigblindindex = -1;
Game.prototype.sessionid;
Game.prototype.chargeindex;
Game.prototype.clear;


function Game()
{
	this.index = 0;
	this.intervalid = -1;
	this.publicpoker = [0, 0, 0, 0, 0];
	this.sitpoker1 = [0, 0, 0, 0, 0, 0];
	this.sitpoker2 = [0, 0, 0, 0, 0, 0];
	this.roundstatus = -1;
	this.generatepoker = generatepoker;
	this.gamestart = function (tableindex)
	{
		// if (this.intervalid == -1)
		// {
		// trace ("NO INTERVALID");
		// return;
		// }
		// g_TexasGlobal.lock();  //预先锁定SO，防止多个线程同时读取和写入
		// g_TexasGlobal,tableList  为 Main.asc 中定义。
		var lock = g_TexasGlobal.lock();
		if (lock > -1)  //是否锁定成功
		{
			var gameindex = g_TexasGlobal.getProperty("gameindex");
			g_TexasGlobal.setProperty("gameindex", gameindex++);
			this.index = gameindex;
			trace("set property status" + this.index + "intervalid is " + this.intervalid + "  tableindex :" + tableindex);
			// clearInterval(this.intervalid); //清除定时器
			// this.intervalid = -1;
			g_TexasGlobal.unlock();  //解除锁定
			tableList[tableindex].game = this;  //将此game对象，绑定到桌上
			tableList[tableindex].status = 1;  //将桌子状态设置为准备开始
			tableList[tableindex].SO.setProperty("Gamestatus", 1);
			this.chargeindex = randomCaller(tableindex); //随机决定负责通信的用户
			tableList[tableindex].sit[this.chargeindex].call("getsessionid", null, this.sessionid);
			trace("Call Back getsessionid from :" + this.chargeindex);
			this.roundstatus = -1; //初始化游戏轮数
		}
	}
	this.sessionid = randRange(1000000, 9999999);
	this.chargeindex = -1;
	this.clear = function clear()
	{
		this.index = 0;
		if (this.intervalid != -1)
		{
			clearInterval(this.intervalid);
			this.intervalid = -1;
		}
		this.publicpoker = [0, 0, 0, 0, 0];
		this.sitpoker1 = [0, 0, 0, 0, 0, 0];
		this.sitpoker2 = [0, 0, 0, 0, 0, 0];
		this.roundstatus = -1;

	}

}


function generatepoker()
{
	var pokernum = pokerTemplates.length - 1;
	var index = 0;
	//5张公共牌
	for (var p = 0; p < 5; p++)
	{
		index = randRange(0, pokernum);
		this.publicpoker[p] = pokerTemplates[index];
		trace("public poker : " + pokerTemplates[index].type + pokerTemplates[index].number)
	}
	//每个位置的第一张,6个位置
	for (var p = 0; p < 6; p++)
	{
		index = randRange(0, pokernum);
		this.sitpoker1[p] = pokerTemplates[index];
		trace("sitpoker2 " + p + " :  " + pokerTemplates[index].type + pokerTemplates[index].number)
	}
	//每个位置的第二张
	for (var p = 0; p < 6; p++)
	{
		index = randRange(0, pokernum);
		this.sitpoker2[p] = pokerTemplates[index];
		trace("sitpoker2 " + p + " :  " + pokerTemplates[index].type + pokerTemplates[index].number)
	}

}


function randRange(min, max)
{
	var randomNum = Math.floor(Math.random() * (max - min + 1)) + min;
	return randomNum;
}

//本函数为在TableIndex 指定的桌子上，随机抽取一个玩家作为本局游戏的消息主导发送方。
// function randomCaller (tableindex)
// {
// var temparr = [];
// for ( var k =0; k < tableList[tableindex].sit.length;k++)
// {
// if (tableList[tableindex].sit[k])
// { temparr.push(k);
// }
// }
// return temparr[randRange (0,temparr.length)];
// }
